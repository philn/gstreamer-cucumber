initSidebarItems({"enum":[["Coloring","Possible policies of a [`console`] output coloring."],["Verbosity","Standard verbosity levels of a [`Writer`]."]],"mod":[["basic","Default [`Writer`] implementation."],["discard","Wrappers providing no-op implementations."],["fail_on_skipped","[`Writer`]-wrapper for transforming `Skipped` `Step`s into `Failed`."],["normalize","[`Writer`]-wrapper for outputting events in a normalized readable order."],["out","Tools for writing output."],["repeat","[`Writer`]-wrapper for re-outputting events at the end of an output."],["summarize","[`Writer`]-wrapper for collecting a summary of execution."],["tee","Passing events to multiple terminating [`Writer`]s simultaneously."]],"struct":[["AssertNormalized","Wrapper for a [`Writer`] asserting it being [`Normalized`]."],["Basic","Default [`Writer`] implementation outputting to an [`io::Write`] implementor ([`io::Stdout`] by default)."],["FailOnSkipped","[`Writer`]-wrapper for transforming `Skipped` `Step`s into `Failed`."],["Normalize","Wrapper for a [`Writer`] implementation for outputting events corresponding to order guarantees from the `Runner` in a [`Normalized`] readable order."],["Repeat","Wrapper for a [`Writer`] implementation for re-outputting events at the end of an output, based on a filter predicated."],["Summarize","Wrapper for a [`Writer`] for outputting an execution summary (number of executed features, scenarios, steps and parsing errors)."],["Tee","Wrapper for passing events to multiple terminating [`Writer`]s simultaneously."]],"trait":[["Arbitrary","[`Writer`] that also can output an arbitrary `Value` in addition to regular `Cucumber` events."],["Ext","Extension of [`Writer`] allowing its normalization and summarization."],["Failure","[`Writer`] tracking a number of `Failed` `Step`s and parsing errors."],["NonTransforming","Marker indicating that a [`Writer`] doesnâ€™t transform or rearrange events."],["Normalized","Marker indicating that a [`Writer`] can accept events in a happened-before order."],["Summarizable","Marker indicating that a [`Writer`] can be wrapped into a [`Summarize`]."],["Writer","Writer of `Cucumber` events to some output."]]});